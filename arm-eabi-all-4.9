#!/bin/bash
# Copyright (C) 2015 Joe Maples
# Copyright (C) 2015 The SaberMod Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# This scripts is to build all of my arm-eabi toolchains and upload them to GitHub.
#

###########################################################################
###########################################################################
#####                                                                 #####
#####            B U I L D    C O N F I G U R A T I O N               #####
#####                                                                 #####
###########################################################################
###########################################################################

export SET_GCC_VERSION=4.9.3;
export SET_CLOOG_VERSION=0.18.3;
export SET_ISL_VERSION=0.14;
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'
export target_cpu=arm
export TARGET_CPU_VARIANT=krait
export TARGET_USE_QCOM_BIONIC_OPTIMIZATION=true
export DATE=`date +%Y-%m-%d`
JOBS="$(cat /proc/cpuinfo | grep -c processor)";
OPT_JOBS=$(bc <<< "($JOBS-1)*2")
MAKE_FLAGS="-j$OPT_JOBS -s";

fix_perms(){
# Fix permission errors
echo "Fixing permissions";
sudo chmod -R 777 linaro;
sudo chmod -R 777 linaro/.repo;
sudo chmod -R 777 sm;
sudo chmod -R 777 sm/.repo;
}

build_linaro(){
	cd ~/linaro/build;
	echo   "Building Linaro";
	# Make sure gcc is on the right remote branch Linaro 4.9
	cd ../gcc/gcc-UBER && rm -rf * && git reset --hard && git fetch uu linaro-4.9 && git checkout FETCH_HEAD && cd ../../build;

	# Make a clean build
	if [ -e Makefile ];
	then
    		make $MAKE_FLAGS clean;
    		make $MAKE_FLAGS distclean;
	fi;

	export PREFIX_PATH=~/hyper/Linaro-arm-eabi-4.9;
	export PREFIX=--prefix=$PREFIX_PATH;

	if [ -d "$PREFIX_PATH" ];
	then
   	 rm -rf $PREFIX_PATH;
   	 mkdir -p $PREFIX_PATH;
	else
   	 mkdir -p $PREFIX_PATH;
	fi;

	# sysroot
	cd ../sysroot && rm -rf * && git reset --hard && git fetch gh gcc-4.9 && git checkout FETCH_HEAD && cd ../build;
	export SYSROOT_SRC_PATH=../sysroot/arch-arm;
	export SYSROOT_DEST_PATH=$PREFIX_PATH/arch-arm;
	cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
	export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;


	# Build and install cloog and isl libraries into the toolchain sysroot environment.

	# CLOOG
	export CLOOG_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
	export CLOOG_PREFIX=--prefix=$CLOOG_PREFIX_PATH;

	cd ../cloog/cloog-current;
	./configure $CLOOG_PREFIX;

	make $MAKE_FLAGS;
	make install -s;

	# cleanup
	make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

	# untracked files
	rm -rf cloog-isl-uninstalled.pc cloog-isl-uninstalled.sh cloog-isl.pc cloog-isl.pc.in doc/gitversion.texi version.h isl/gitversion.h isl/include/isl/stdint.h isl/isl-uninstalled.pc isl/isl-uninstalled.sh isl/isl.pc isl/isl.pc.in;

	git reset --hard;

	cd isl && git reset --hard;

	# ISL

	export ISL_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
	export ISL_PREFIX=--prefix=$ISL_PREFIX_PATH;

	cd ../../../isl/isl-current;
	./configure $ISL_PREFIX;

	make $MAKE_FLAGS;
	make install -s;

	# cleanup
	make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

	# untracked files
	rm -rf gitversion.h include/isl/stdint.h isl-uninstalled.pc isl-uninstalled.sh isl.pc isl.pc.in;

	git reset --hard;

	# make libs available for ld and cc
	export SYSROOT_LIB_PATH=$PREFIX_PATH/lib;
	export LD_LIBRARY_PATH=$SYSROOT_LIB_PATH;
	export LIBRARY_PATH=$SYSROOT_LIB_PATH;

	cd ../../build;

	#Build Configuration
	./configure $PREFIX $SYSROOT --target=arm-eabi --host=x86_64-linux-gnu --build=x86_64-linux-gnu --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=UBER --with-pkgversion="UBER-Linaro-4.9.3_arm+graphite" --with-binutils-version=current --with-cloog-version=current --with-cloog-version=current --with-isl-version=current --with-gmp-version=current --with-mpfr-version=current --with-mpc-version=current --with-gdb-version=current --disable-docs --disable-nls --disable-option-checking --disable-bootstrap --quiet --enable-graphite=yes

	#Build the toolchain
	make $MAKE_FLAGS;

	#Install the toolchain (twice)
	make install -s && make install -s;
}

upload_linaro(){
	cd $PREFIX_PATH;
	echo "Uploading Linaro to GitHub";
	git init && git add -A && git commit -m "Update build to $DATE" -s && git push -f https://github.com/hyper-toolchains/linaro-arm-eabi-4.9.git master;
}

build_linaromod(){
#Copy files for LinaroMod
cd sm/gcc/gcc-Linaro && git fetch https://git.linaro.org/toolchain/gcc-new.git linaro-4_9-branch && git checkout FETCH_HEAD
echo  "Copying files for LinaroMod";
#cp -R ~/linaro/gcc/gcc-UBER ~/sm/gcc/;

# Build LinaroMod
cd ../../build-scripts
echo "Building LinaroMod"

# Attempt to speed up compilation by linking everything to /tmp filesystem
# Also find toolchain root
rm -rf /tmp/sm-tc;

cd ../;
export TOOLCHAIN_ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";
cd /tmp && ln -s $TOOLCHAIN_ROOT /tmp/sm-tc && cd /tmp/sm-tc;

export TOOLCHAIN_ROOT_SYMBOLIC="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Make sure gcc is on the right remote branch 4.9.x
cd $TOOLCHAIN_ROOT_SYMBOLIC/gcc/gcc-SaberMod && rm -rf * && git reset --hard && git fetch https://git.linaro.org/toolchain/gcc-new.git linaro-4_9-branch && git checkout FETCH_HEAD && cd $TOOLCHAIN_ROOT_SYMBOLIC/build;

# Build PATH
export BUILD_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# Make a clean build
if [ -e Makefile ];
then
    make $MAKE_FLAGS clean;
    make $MAKE_FLAGS distclean;
fi;

# Remove all untracked files and directories in git
if [ -d gmp-gnu ];
then
    rm -rf gmp-gnu;
fi;

export PREFIX_PATH=~/hyper/LinaroMod-arm-eabi-4.9;
export PREFIX=--prefix=$PREFIX_PATH;

if [ -d "$PREFIX_PATH" ];
then
    rm -rf $PREFIX_PATH;
    mkdir -p $PREFIX_PATH;
else
    mkdir -p $PREFIX_PATH;
fi;

export GCC_INSTALLED=$PREFIX_PATH/bin/arm-eabi-gcc;

# sysroot
cd $TOOLCHAIN_ROOT_SYMBOLIC/sysroot && rm -rf * && git reset --hard && git fetch sm gcc-4.9 && git checkout FETCH_HEAD && cd $BUILD_PATH;
export SYSROOT_SRC_PATH=$TOOLCHAIN_ROOT_SYMBOLIC/sysroot/arch-arm;
export SYSROOT_DEST_PATH=$PREFIX_PATH/arch-arm;
cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;

# Build and install cloog, isl and osl libraries into the toolchain sysroot environment.

# GMP
cd $TOOLCHAIN_ROOT_SYMBOLIC/gmp/gmp-gnu;
export GMP_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )";

# CLOOG
export CLOOG_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
export CLOOG_PREFIX=--prefix=$CLOOG_PREFIX_PATH;

# Cloog Build Configuration
cd $TOOLCHAIN_ROOT_SYMBOLIC/cloog/cloog-$SET_CLOOG_VERSION && ./configure $CLOOG_PREFIX --with-isl=bundled --with-osl=bundled --with-gmp=system;

make $MAKE_FLAGS;
make install;

# cleanup
make $MAKE_FLAGS clean;
make $MAKE_FLAGS distclean;

# untracked files
rm -rf cloog-isl-uninstalled.pc cloog-isl-uninstalled.sh cloog-isl.pc cloog-isl.pc.in doc/gitversion.texi version.h isl/gitversion.h isl/include/isl/stdint.h isl/isl-uninstalled.pc isl/isl-uninstalled.sh isl/isl.pc isl/isl.pc.in;

git reset --hard;

# make libs available for ld
export SYSROOT_LIB_PATH=$SYSROOT_DEST_PATH/usr/lib;
export LD_LIBRARY_PATH=$SYSROOT_LIB_PATH;

export CLOOG_INSTALLED=$SYSROOT_LIB_PATH/libcloog-isl.so.4
export SET_TARGET_BUILD=CLOOG;

cd $BUILD_PATH;

# Did we make it?
if [ -e $CLOOG_INSTALLED ];
then

    # Make a system link for older version of libisl using the newer version for older systems
    cd $SYSROOT_LIB_PATH && ln -s libisl.so.13.1.0 libisl.so.10 && cd $BUILD_PATH;
    ./build-success;
    sleep 5;

    # GCC Build Configuration
    ./configure $PREFIX $SYSROOT --host=x86_64-linux-gnu --build=x86_64-linux-gnu --target=arm-eabi --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=Linaro --with-pkgversion='LinaroMod-4.9.x_arm-graphite' --with-binutils-version=android --with-gmp-version=gnu --with-mpfr-version=gnu --with-mpc-version=gnu --with-gdb-version=android --with-cloog-version=$SET_CLOOG_VERSION --with-isl-version=$SET_ISL_VERSION --enable-graphite=yes --enable-plugins --enable-threads --enable-ld=default --disable-option-checking --with-host-libstdcxx='-static-libgcc -Wl,-Bstatic,-lstdc++,-Bdynamic -lm' --disable-bootstrap "--enable-eh-frame-hdr-for-static";

    # Build the toolchain
    make $MAKE_FLAGS;

    # Install the toolchain (twice)
    make install && make install;

    export SET_TARGET_BUILD=GCC;

    # Did we make it?
    if [ -e $GCC_INSTALLED ];
    then
        ./build-success;
    else
        ./build-failed;
    fi;
else
    ./build-failed;
fi;

cd $TOOLCHAIN_ROOT/build-scripts;

}

upload_linaromod(){
	echo "Uploading LinaroMod"
	# Add README
	cd $PREFIX_PATH;
	touch README.mkdn;
	echo " LinaroMod ARM-EABI 4.9
----------------------
This toolchain was built using Linaro GCC, but with mostly SaberMod resources (isl, gmp, cloog, etc.) with the exception of using Linaro Binutils and GDB. This is built opposite of my SaberNaro toolchain." >> README.mkdn;

	# Upload LinaroMod to GitHub
	git init && git add -A && git commit -m "Update build to $DATE" -s && git push -f https://github.com/hyper-toolchains/LinaroMod-arm-eabi-4.9.git master;
}

build_sabernaro(){
	#Copy files for SaberNaro
	echo "Copying files for SaberNaro"
	cp -R ~/sm/gcc/gcc-SaberMod ~/linaro/gcc/;

	# Build SaberNaro
	echo "Building SaberNaro"
	cd ~/linaro/build;

	# Make a clean build
	if [ -e Makefile ];
	then
	    make $MAKE_FLAGS clean;
	    make $MAKE_FLAGS distclean;
	fi;

	export PREFIX_PATH=~/hyper/SaberNaro-arm-eabi-4.9;
	export PREFIX=--prefix=$PREFIX_PATH;

	if [ -d "$PREFIX_PATH" ];
	then
	    rm -rf $PREFIX_PATH;
 	    mkdir -p $PREFIX_PATH;
	else
   	 mkdir -p $PREFIX_PATH;
	fi;

	# sysroot
	cd ../sysroot && rm -rf * && git reset --hard && git fetch gh gcc-4.9 && git checkout FETCH_HEAD && cd ../build;
	export SYSROOT_SRC_PATH=../sysroot/arch-arm;
	export SYSROOT_DEST_PATH=$PREFIX_PATH/arch-arm;
	cp -R $SYSROOT_SRC_PATH -f $SYSROOT_DEST_PATH;
	export SYSROOT=--with-sysroot=$SYSROOT_DEST_PATH;


	# Build and install cloog and isl libraries into the toolchain sysroot environment.

	# CLOOG
	export CLOOG_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
	export CLOOG_PREFIX=--prefix=$CLOOG_PREFIX_PATH;

	cd ../cloog/cloog-current;
	./configure $CLOOG_PREFIX;

	make $MAKE_FLAGS;
	make install -s ;

	# cleanup
	make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

	# untracked files
	rm -rf cloog-isl-uninstalled.pc cloog-isl-uninstalled.sh cloog-isl.pc cloog-isl.pc.in doc/gitversion.texi version.h isl/gitversion.h isl/include/isl/stdint.h isl/isl-uninstalled.pc isl/isl-uninstalled.sh isl/isl.pc isl/isl.pc.in;

	git reset --hard;

	cd isl && git reset --hard;

	# ISL
	export ISL_PREFIX_PATH=$SYSROOT_DEST_PATH/usr;
	export ISL_PREFIX=--prefix=$ISL_PREFIX_PATH;

	cd ../../../isl/isl-current;
	./configure $ISL_PREFIX;

	make $MAKE_FLAGS;
	make install -s;

	# cleanup
	make $MAKE_FLAGS clean && make $MAKE_FLAGS distclean;

	# untracked files
	rm -rf gitversion.h include/isl/stdint.h isl-uninstalled.pc isl-uninstalled.sh isl.pc isl.pc.in;

	git reset --hard;

	# make libs available for ld and cc
	export SYSROOT_LIB_PATH=$PREFIX_PATH/lib;
	export LD_LIBRARY_PATH=$SYSROOT_LIB_PATH;
	export LIBRARY_PATH=$SYSROOT_LIB_PATH;

	cd ../../build;

	#Build Configuration
	./configure $PREFIX $SYSROOT --target=arm-eabi --host=x86_64-linux-gnu --build=x86_64-linux-gnu --program-transform-name='s&^&arm-eabi-&' --with-gcc-version=SaberMod --with-pkgversion="SaberNaro-4.9.3_arm+graphite" --with-binutils-version=current --with-cloog-version=current --with-cloog-version=current --with-isl-version=current --with-gmp-version=current --with-mpfr-version=current --with-mpc-version=current --with-gdb-version=current --disable-docs --disable-nls --disable-option-checking --disable-bootstrap --quiet --enable-graphite=yes

	#Build the toolchain
	make $MAKE_FLAGS;

	#Install the toolchain (twice)
	make install -s && make install -s;
}

upload_sabernaro(){
	echo "Uploading SaberNaro"
	# Add README
	cd $PREFIX_PATH;
	touch README.mkdn;
	echo " SaberNaro ARM-EABI 4.9
----------------------
This toolchain was built using SaberMod GCC, but in a Linaro build environment (linaro binutils, gdb, cloog, etc.) with the exception of using the latest ISL. This is built opposite of my LinaroMod toolchain." >> README.mkdn;

	# Upload SaberNaro to GitHub
	git init && git add -A && git commit -m "Update build to $DATE" -s && git push -f https://github.com/hyper-toolchains/SaberNaro-arm-eabi-4.9.git master;
}

cleanup(){
	echo "Clean up time!"
	#Clean Up Time!
	rm -rf ~/linaro/gcc/gcc-SaberMod;
}
